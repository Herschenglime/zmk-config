/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Ex command to convert kp to autoshifted key
 *
 * :'<,'>s/\(\&kp \)\([A-Z]+\)/AS(\2)/g
 * */

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

#define AS(keycode) &as LS(keycode) keycode

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        sm: behavior_sticky_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "sticky_momentary";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_del {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp DEL>;
        };

         combo_backspace {
            timeout-ms = <30>;
            key-positions = <10 11>;
            bindings = <&kp BSPC>;
        };

         combo_backslash {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <AS(BACKSLASH)>;
        };

         combo_hyphen {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <AS(MINUS)>;
        };

         combo_equals {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <AS(EQUAL)>;
        };

          combo_quote_mod {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&mt LGUI SQT>;
        };

          combo_numlayer {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&sm 1 1>;
        };

          combo_reset {
            timeout-ms = <50>;
            key-positions = <1 2 7 8>;
            bindings = <&reset>;
        };

          combo_bootloader {
            timeout-ms = <50>;
            key-positions = <3 4 5 6>;
            bindings = <&bootloader>;
        };

          combo_caps_word {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&caps_word>;
        };

          combo_num_layer_toggle {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&mo_tog 1 1>;
    };

        keymap {
                compatible = "zmk,keymap";
/*
                                                 reset
                           ┌─────┬─────────────────┴─────────────────┬─────┐
                           │     │                                   │     │
                           │     │            bootloader             │     │
                           │     │     ┌─────┬─────┴─────┬─────┐     │     │
                  |  q  |  w  |  f  |  p  |  b  |     |  j  |  l  |  u  |  y  |  ;  |
                  |    DEL    |     |     |     |     |     |     |     |     \     |

                  |  a  |  r  |  s  |  t  |  g  |     |  m  |  n  |  e  |  i  |  o  |
                  | lt2 |     |     |     |     |     |     |     |     |     | lt3 |
                  |     |     |     |     |     |     |     |     |     |     '     |
                  |    BSP    |     |     -     |     |     =     |     |    MOD    |

                  |  z  |  x  |  c  |  d  |  v  |     |  k  |  h  |  ,  |  .  |  /  |
                  | CTL |     |    sm1    |     |     |     |     |     |     | CTL |

                                    | SPC | ESC |     | TAB | ENT |
                                    | SFT | CTL |     | ALT | MOD |
                                       │     └─────┬─────┘     │
                                       │       caps_word       │
                                       │                       │
                                       └───────────┬───────────┘
                                                 ltog1
*/

                default_layer {
        bindings = <
        AS(Q) AS(W) AS(F) AS(P) AS(B)                       AS(J) AS(L)  AS(U)    AS(Y)   AS(SEMI)
        &lt 2 A AS(R) AS(S) AS(T) AS(G)                                 AS(M) AS(N) AS(E) AS(I) &lt 3 O
        &mt LCTL Z AS(X) AS(C) AS(D) AS(V)                      AS(K) AS(H)  AS(CMMA) AS(DOT) &mt LCTL FSLH
                        &mt LSFT SPC &mt LCTL ESC                   &mt LALT TAB &mt LGUI RET
        >;
        };

/*
                |  !  |  @  |  {  |  }  |  &  |     | INS |  7  |  8  |  9  |  *  |
                |    DEL    |     |     |     |     |     |     |     |     \     |

                |  #  |  $  |  (  |  )  |  *  |     |  0  |  4  |  5  |  6  |  +  |
                | lt2 |     |     |     |     |     |     |     |     |     | lt3 |
                |    BSP    |     |     -     |     |     =     |     |    MOD    |

                |  %  |  ^  |  [  |  ]  |  `  |     |SYSRQ|  1  |  2  |  3  |  /  |

                                  | ( ) | ( ) |     | ( ) | ( ) |
*/

                number_layer {
        bindings = <
        &kp EXCL &kp AT &kp LBRC &kp RBRC &kp AMPS                          &kp INS &kp N7  &kp N8    &kp N9   &kp ASTRK
        &lt 2 HASH &kp DLLR &kp LPAR &kp RPAR &kp ASTRK                               &kp N0 &kp N4 &kp N5 &kp N6 &kp PLUS
        &kp PRCNT &kp CARET &kp LBKT &kp RBKT AS(GRAVE)                         &kp PSCRN &kp N1  &kp N2 &kp N3 &kp SLASH
                        &trans &trans               &trans &trans
        >;
        };

/*
                | ( ) | ( ) | HOM | END | ( ) |     | ( ) | A-↓ |Docs-|Docs+| A-↑ |

                | ( ) | TAB | C-← | C-→ | ( ) |     | ( ) |  ←  |  ↓  |  ↑  |  →  |

                | ( ) |S-TAB| PGD | PGU | ( ) |     | ( ) | A-← |Zoom-|Zoom+| A-→ |

                                  | ( ) | ( ) |     | ( ) | ( ) |
*/

                movement_layer {
        bindings = <
            &trans &trans &kp HOME &kp END &trans                 &trans &kp LA(DOWN) &kp LC(LA(MINUS)) &kp LC(LA(EQUAL)) &kp LA(UP)
    &trans &kp TAB &kp LC(LEFT) &kp LC(RIGHT) &trans      &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT
    &trans &kp LS(TAB) &kp PG_DN &kp PG_UP &trans      &trans &kp LA(LEFT) &kp LC(MINUS) &kp LC(EQUAL) &kp LA(RIGHT)
                         &trans &trans      &trans &trans
        >;
        };

/*
                | Fn1 | Fn2 | Fn3 | Fn4 |     |        |     |BT-P | BT-N | BT-C|    |

                | Fn5 | Fn6 | Fn7 | Fn8 |     |        |     | Vol-| Vol+|  ⏯  | ( ) |

                | Fn9 | F10 | F11 | F12 |     |        |     |  ⏮ |  ⏭  |     |     |

                                  |     |     |        |     |     |
*/

                media_layer {
        bindings = <
    &kp F1 &kp F2 &kp F3 &kp F4    &bt BT_SEL 0         &bt BT_SEL 3 &bt BT_PRV &bt BT_NXT &bt BT_CLR &trans
    &kp F5 &kp F6 &kp F7 &kp F8    &bt BT_SEL 1         &bt BT_SEL 4 &kp C_VOL_DN &kp C_VOL_UP &kp C_PP &trans
    &kp F9 &kp F10 &kp F11 &kp F12 &bt BT_SEL 2      &trans &kp C_PREV &kp C_NEXT &trans &trans
                         &trans &trans         &trans &trans
        >;
        };



    };
};

// empty layers for easy creation later

/*
                |     |     |     |     |     |        |     |     |     |     |     |

                |     |     |     |     |     |        |     |     |     |     |     |

                |     |     |     |     |     |        |     |     |     |     |     |

                                  |     |     |        |     |     |
*/

/*
                empty_layer {
        bindings = <
    &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans
                         &trans &trans      &trans &trans
        >;
        };
*/
